/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : FreeXL
 #	author : miyako
 #	2014/12/29
 #
 # --------------------------------------------------------------------------------*/


#include "4DPluginAPI.h"
#include "4DPlugin.h"

#pragma mark - map object references to number

typedef const void *xls_handle;
std::map<uint32_t, xls_handle> __handles;

uint32_t __handleSet(xls_handle h){
	
	std::mutex m;
	std::lock_guard<std::mutex> lock(m);
	
	uint32_t i = 1;
	
	while (__handles.find(i) != __handles.end()) {
		i++;
	}
	
	__handles.insert(std::map<uint32_t, xls_handle>::value_type(i, h));
	
	return i;
}

xls_handle __handleGet(uint32_t i){
	
	std::mutex m;
	std::lock_guard<std::mutex> lock(m);
	
	xls_handle h = NULL;
	
	std::map<uint32_t, xls_handle>::iterator pos = __handles.find(i);
	
	if(pos != __handles.end()) {
		h = pos->second;
	}
	
	return h;
}

void __handleClear(uint32_t i){
	
	std::mutex m;
	std::lock_guard<std::mutex> lock(m);
	
	xls_handle h = NULL;
	
	std::map<uint32_t, xls_handle>::iterator pos = __handles.find(i);
	
	if(pos != __handles.end()) {
		h = pos->second;
		__handles.erase(pos);
	}
}

#pragma mark -

void PluginMain(PA_long32 selector, PA_PluginParameters params)
{
	try
	{
		PA_long32 pProcNum = selector;
		sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
		PackagePtr pParams = (PackagePtr)params->fParameters;
		
		CommandDispatcher(pProcNum, pResult, pParams);
	}
	catch(...)
	{
		
	}
}

void CommandDispatcher (PA_long32 pProcNum, sLONG_PTR *pResult, PackagePtr pParams)
{
	switch(pProcNum)
	{
			// --- FreeXL
			
		case 1 :
			FreeXL_Get_worksheet_name(pResult, pParams);
			break;
			
		case 2 :
			FreeXL_Get_info(pResult, pParams);
			break;
			
		case 3 :
			FreeXL_Close(pResult, pParams);
			break;
			
		case 4 :
			FreeXL_Open_info(pResult, pParams);
			break;
			
		case 5 :
			FreeXL_Open(pResult, pParams);
			break;
			
		case 6 :
			FreeXL_Set_active_worksheet(pResult, pParams);
			break;
			
		case 7 :
			FreeXL_Get_active_worksheet(pResult, pParams);
			break;
			
		case 8 :
			FreeXL_Worksheet_dimensions(pResult, pParams);
			break;
			
		case 9 :
			FreeXL_Get_cell_value(pResult, pParams);
			break;
			
	}
}

// ------------------------------------ FreeXL ------------------------------------


void FreeXL_Get_worksheet_name(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;
	C_TEXT Param3;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	
	int error = FREEXL_NULL_HANDLE;
	
	xls_handle h = __handleGet(Param1.getIntValue());
	if(h){
		const char *name;
		error = freexl_get_worksheet_name(h, Param2.getIntValue()  -1, &name);
		if(FREEXL_OK == error){
			CUTF8String n = CUTF8String((const uint8_t *)name);
			Param3.setUTF8String(&n);
		}
	}
	
	Param3.toParamAtIndex(pParams, 3);
	returnValue.setIntValue(error);
	returnValue.setReturn(pResult);
}

void FreeXL_Get_info(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;
	C_LONGINT Param3;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	
	int error = FREEXL_NULL_HANDLE;
	
	xls_handle h = __handleGet(Param1.getIntValue());
	if(h){
		unsigned int info;
		error = freexl_get_info(h, Param2.getIntValue(), &info);
		if(FREEXL_OK == error){
			Param3.setIntValue(info);
		}
	}
	Param3.toParamAtIndex(pParams, 3);
	returnValue.setIntValue(error);
	returnValue.setReturn(pResult);
}

void FreeXL_Close(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	int error = FREEXL_NULL_HANDLE;
	
	xls_handle h = __handleGet(Param1.getIntValue());
	if(h){
		error = freexl_close(h);
		if(FREEXL_OK == error){
			__handleClear(Param1.getIntValue());
		}
	}
	
	returnValue.setIntValue(error);
	returnValue.setReturn(pResult);
}

void FreeXL_Open_info(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_LONGINT Param2;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	
	CUTF8String path;
	Param1.copyPath(&path);
	
	xls_handle h;
	int error = freexl_open_info((const char *)path.c_str(), &h);
	if(FREEXL_OK == error){
		Param2.setIntValue(__handleSet(h));
	}
	
	Param2.toParamAtIndex(pParams, 2);
	
	returnValue.setIntValue(error);
	returnValue.setReturn(pResult);
}

void FreeXL_Open(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_LONGINT Param2;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	
	CUTF8String path;
	Param1.copyPath(&path);
	
	xls_handle h;
	int error = freexl_open((const char *)path.c_str(), &h);
	if(FREEXL_OK == error){
		Param2.setIntValue(__handleSet(h));
	}
	
	Param2.toParamAtIndex(pParams, 2);
	
	returnValue.setIntValue(error);
	returnValue.setReturn(pResult);
}

void FreeXL_Set_active_worksheet(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	
	int error = FREEXL_NULL_HANDLE;
	
	xls_handle h = __handleGet(Param1.getIntValue());
	if(h){
		error = freexl_select_active_worksheet(h, Param2.getIntValue() -1);
	}
	
	returnValue.setIntValue(error);
	returnValue.setReturn(pResult);
}

void FreeXL_Get_active_worksheet(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	
	int error = FREEXL_NULL_HANDLE;
	
	xls_handle h = __handleGet(Param1.getIntValue());
	if(h){
		unsigned short index;
		error = freexl_get_active_worksheet(h, &index);
		if(FREEXL_OK == error){
			Param2.setIntValue(index +1);
		}
	}
	
	Param2.toParamAtIndex(pParams, 2);
	returnValue.setIntValue(error);
	returnValue.setReturn(pResult);
}

void FreeXL_Worksheet_dimensions(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;
	C_LONGINT Param3;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	
	int error = FREEXL_NULL_HANDLE;
	
	xls_handle h = __handleGet(Param1.getIntValue());
	if(h){
		unsigned int rows;
		unsigned short columns;
		error = freexl_worksheet_dimensions(h, &rows, &columns);
		if(FREEXL_OK == error){
			Param2.setIntValue(rows +1);
			Param3.setIntValue(columns +1);
		}
	}
	
	Param2.toParamAtIndex(pParams, 2);
	Param3.toParamAtIndex(pParams, 3);
	returnValue.setIntValue(error);
	returnValue.setReturn(pResult);
}

void FreeXL_Get_cell_value(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;
	C_LONGINT Param3;
	C_LONGINT Param4;
	C_REAL Param5;
	C_TEXT Param6;
	C_LONGINT Param7;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param3.fromParamAtIndex(pParams, 3);
	
	int error = FREEXL_NULL_HANDLE;
	
	xls_handle h = __handleGet(Param1.getIntValue());
	if(h){
		FreeXL_CellValue value;
		error = freexl_get_cell_value(h, Param2.getIntValue() -1, Param3.getIntValue() -1, &value);
		if(FREEXL_OK == error){
			CUTF8String v;
			switch (value.type){
				case FREEXL_CELL_INT:
					Param4.setIntValue(value.value.int_value);
					break;
				case FREEXL_CELL_DOUBLE:
					Param5.setDoubleValue(value.value.double_value);
					break;
				case FREEXL_CELL_TEXT:
				case FREEXL_CELL_SST_TEXT:
				case FREEXL_CELL_DATE:
				case FREEXL_CELL_DATETIME:
				case FREEXL_CELL_TIME:
					v = CUTF8String((const uint8_t *)value.value.text_value);
					Param6.setUTF8String(&v);
					break;
				case FREEXL_CELL_NULL:
					break;
					
			}
			Param7.setIntValue(value.type);
		}
	}
	Param4.toParamAtIndex(pParams, 4);
	Param5.toParamAtIndex(pParams, 5);
	Param6.toParamAtIndex(pParams, 6);
	Param7.toParamAtIndex(pParams, 7);
	returnValue.setIntValue(error);
	returnValue.setReturn(pResult);
}
